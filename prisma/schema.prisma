// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  groups        GroupMember[]
  trips         TripParticipant[]
  createdGroups Group[]   @relation("GroupCreator")
  createdTrips  Trip[]    @relation("TripCreator")
  availability  Availability[]
  votes         Vote[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String       @id @default(cuid())
  name        String
  description String?
  isPermanent Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  creator     User         @relation("GroupCreator", fields: [creatorId], references: [id])
  members     GroupMember[]
  trips       Trip[]
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  role      String   @default("member") // "admin", "member"
  joinedAt  DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Trip {
  id          String       @id @default(cuid())
  name        String
  description String?
  destination String?
  startDate   DateTime?
  endDate     DateTime?
  status      String       @default("planning") // "planning", "confirmed", "completed", "cancelled"
  budget      Int?         // Total budget in cents
  perPersonBudget Int?     // Per person budget in cents
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  creator     User         @relation("TripCreator", fields: [creatorId], references: [id])
  groupId     String?
  group       Group?       @relation(fields: [groupId], references: [id])
  participants TripParticipant[]
  availability Availability[]
  options     TripOption[]
  votes       Vote[]
  comments    Comment[]
}

model TripParticipant {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  role      String   @default("participant") // "organizer", "participant"
  joinedAt  DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
}

model Availability {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TripOption {
  id          String   @id @default(cuid())
  tripId      String
  type        String   // "flight", "hotel", "activity", "date"
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  price       Int?     // Price in cents
  imageUrl    String?
  externalUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  votes       Vote[]
}

model Vote {
  id          String     @id @default(cuid())
  tripId      String
  optionId    String
  userId      String
  value       Int        // 1 for upvote, -1 for downvote
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  trip        Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  option      TripOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([optionId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
